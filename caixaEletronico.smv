MODULE main
VAR
	cartao:         boolean;
	codigo_conta:   boolean;
	quantia:        boolean;
	op_saldo:       boolean;
	op_sair:	boolean;
	op_deposito:	boolean;
	op_saque:	boolean;
	location :      {idle,operacoes,mostrar_Saldo,quantia_saque,conta,saldo_Insuficiente,error,quantia_Deposito};


	

ASSIGN

	init(location) := idle;
	

	next(location) := case
			(location = idle) & cartao: operacoes;
			(location = operacoes) & op_saldo: mostrar_Saldo;
			(location = mostrar_Saldo): operacoes;
			(location = operacoes) & op_saque : quantia_saque;
			(location = quantia_saque) & quantia : operacoes;
			(location = quantia_saque) & !quantia : saldo_Insuficiente;
			(location = saldo_Insuficiente) : operacoes;
			(location = operacoes) & op_deposito : conta;
			(location = conta) & codigo_conta : quantia_Deposito;
			(location = conta) & !codigo_conta : error;
			(location = quantia_Deposito) & quantia : operacoes;
			(location = quantia_Deposito) & !quantia : saldo_Insuficiente;
			(location = error) : operacoes;
			(location = operacoes) & op_sair : idle;
			TRUE : idle;
			esac;

			  
SPEC AG(cartao -> AF location != idle) /-- Especifica que para todos os caminhos, se uma pessoa inserir o cartao, o proximo estado vai ser sempre diferente de idle --/
SPEC AG((!quantia & location = quantia_saque) -> EX location = saldo_Insuficiente) /-- Especifica que, para todos os caminhos onde a pessoa tentar realizar um saque e a quantia for invalida (saque maior que seu saldo) o proximo estado deve ser saldo_Insuficiente --/
SPEC AG((!codigo_conta & location = conta) -> EX location = error) /-- Especifica que, para todos os caminhos, sempre que uma pessoa for realizar uma operacao na conta e o codigo fornecido for incorreto, o proximo estado sera o estado de erro. --/
SPEC AG((!quantia & location = quantia_Deposito) -> EX location = saldo_Insuficiente) /-- Especifica que, para todos os caminhos onde a pessoa tentar realizar um deposito e a quantia for invalida (deposito em outra conta maior que seu saldo) o proximo estado deve ser saldo_Insuficiente --/
SPEC AG((op_saldo & location = operacoes) -> EX location = mostrar_Saldo) /-- Especifica que, para todos os caminhos onde a pessoa tenta verificar o saldo, se a pessoa estiver em operacao, o proximo estado deve ser operacao --/
SPEC AG((!quantia & location = quantia_Deposito) -> EX location = operacoes) /-- Teste para quebrar, Testara fazer um deposito e mesmo sem ter saldo disponivel pretende ir para operacoes --/
SPEC AG((!quantia & location = quantia_saque) -> EX location = operacoes) /-- Teste para quebrar, Testara fazer um saque e mesmo sem ter saldo disponivel pretende ir para operacoes --/

