MODULE main
VAR
	cartao:         boolean;
	codigo_conta:   boolean;
	saldo:          boolean;
	op_saldo:       boolean;
	op_sair:	boolean;
	op_deposito:	boolean;
	op_saque:	boolean;
	location :      {idle,operacoes,mostrar_Saldo,saldo_saque,conta,saldo_Insuficiente,conta_Inexistente,saldo_Deposito};


	

ASSIGN

	init(location) := idle;
	

	next(location) := case
			(location = idle) & cartao: operacoes;
			(location = operacoes) & op_saldo: mostrar_Saldo;
			(location = mostrar_Saldo): operacoes;
			(location = operacoes) & op_saque : saldo_saque;
			(location = saldo_saque) & saldo : operacoes;
			(location = saldo_saque) & !saldo : saldo_Insuficiente;
			(location = saldo_Insuficiente) : operacoes;
			(location = operacoes) & op_deposito : conta;
			(location = conta) & codigo_conta : saldo_Deposito;
			(location = conta) & !codigo_conta : conta_Inexistente;
			(location = saldo_Deposito) & saldo : operacoes;
			(location = saldo_Deposito) & !saldo : saldo_Insuficiente;
			(location = conta_Inexistente) : operacoes;
			(location = operacoes) & op_sair : idle;
			TRUE : idle;
			esac;

			  
SPEC AG(cartao -> AF location != idle) /-- Especifica que para todos os caminhos, se uma pessoa inserir o cartao, o proximo estado vai ser sempre diferente de idle --/
SPEC AG((!saldo & location = saldo_saque) -> EX location = saldo_Insuficiente) /-- Especifica que, para todos os caminhos onde a pessoa tentar realizar um saque e o saldo for invalida (saque maior que seu saldo) o proximo estado deve ser saldo_Insuficiente --/
SPEC AG((!codigo_conta & location = conta) -> EX location = conta_Inexistente) /-- Especifica que, para todos os caminhos, sempre que uma pessoa for realizar uma operacao na conta e o codigo fornecido for incorreto, o proximo estado sera o estado de erro. --/
SPEC AG((!saldo & location = saldo_Deposito) -> EX location = saldo_Insuficiente) /-- Especifica que, para todos os caminhos onde a pessoa tentar realizar um deposito e o saldo for invalida (deposito em outra conta maior que seu saldo) o proximo estado deve ser saldo_Insuficiente --/
SPEC AG((op_saldo & location = operacoes) -> EX location = mostrar_Saldo) /-- Especifica que, para todos os caminhos onde a pessoa tenta verificar o saldo, se a pessoa estiver em operacao, o proximo estado deve ser operacao --/
SPEC AG((!saldo & location = saldo_Deposito) -> EX location = operacoes) /-- Teste para quebrar, Testara fazer um deposito e mesmo sem ter saldo disponivel pretende ir para operacoes --/
SPEC AG((!saldo & location = saldo_saque) -> EX location = operacoes) /-- Teste para quebrar, Testara fazer um saque e mesmo sem ter saldo disponivel pretende ir para operacoes --/

/-- Especificacoes que indicam que para todos os caminhos, mostra que eh possivel realizar todas as operacoes caso vc esteja localizado no estado operacoes. --/

SPEC AG(location = operacoes -> EF op_sair)
SPEC AG(location = operacoes -> EF op_saldo)
SPEC AG(location = operacoes -> EF op_deposito)
SPEC AG(location = operacoes -> EF op_saque)

/-- Especificacoes que indicam que para algum caminho, mostra que todas as operações são subsequentes imediatas a operação "operacoes". --/
SPEC EG(location = operacoes -> EX op_sair)
SPEC EG(location = operacoes -> EX op_saldo)
SPEC EG(location = operacoes -> EX op_deposito)
SPEC EG(location = operacoes -> EX op_saque)

/--Essa especificação vai gerar um contraexemplo, isso se da pois nela há uma afirmação de que sempre que para todos os caminhos a partir de operacoes, sempre chegará ao estado de erro --/

SPEC AG(location = operacoes -> AG location = error)

/-- Especificação correta --/
SPEC EG(location = operacoes -> EF location = error)
